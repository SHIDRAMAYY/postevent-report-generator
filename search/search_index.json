{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyCon TW post-event report generator (rg-cli) PyCon TW post-event report generator.A cli command, rg-cli, to generate PyCon TW post-event reports. Previously known as attendee-analyzer. rg-cli is a command line tool for you to generate a basic report of attendees, e.g. a pie chart of fields according to job titles. Currently it only supports a csv file as raw data input. Prerequsite Python 3.7 Installation python -m pip install pycontw-report-generator Usage $ python -m rg-cli --help Usage: rg-cli [OPTIONS] Options: --csv TEXT Read csv format data [required] --talks-csv TEXT CSV file for talks [required] --proposed-talks-csv TEXT CSV file for proposed talks [required] --booth-csv TEXT CSV file for booth checking [required] --interactive / --no-interactive Quiet mode. Useful for automation. True for no prompt. [default: False] --cjk-support / --no-cjk-support Enable CJK support in the plot or not. [default: False] --conf TEXT Configuration file of how to analyze --yaml TEXT Report yaml file to describe how a report would be [required] --package-yaml TEXT Package yaml file to describe how a package is defined [required] --sponsor-yaml TEXT Sponsor yaml file to describe how a sponsor is defined [required] --output-path TEXT Where the reports exported [default: /tmp] --help Show this message and exit. Create a working folder to place your attendee raw data outside of the source folder so you won't commit your raw data accidentally. mkdir ../pycontw-postevent-report-generator-working Example After launching your virtual environment, issue the following command: rg-cli --csv ./a.csv --csv ./b.csv --csv ./c.csv --yaml ./report_generator/data/generic.yaml --package-yaml ./examples/packages.yaml --sponsor-yaml ./examples/sponsors.yaml Follow the prompt instruction and you will get jpg images. So far it is well tested with the data of year 2017. Contributing Please see the Contributing for further details.","title":"Home"},{"location":"#pycon-tw-post-event-report-generator-rg-cli","text":"PyCon TW post-event report generator.A cli command, rg-cli, to generate PyCon TW post-event reports. Previously known as attendee-analyzer. rg-cli is a command line tool for you to generate a basic report of attendees, e.g. a pie chart of fields according to job titles. Currently it only supports a csv file as raw data input.","title":"PyCon TW post-event report generator (rg-cli)"},{"location":"#prerequsite","text":"Python 3.7","title":"Prerequsite"},{"location":"#installation","text":"python -m pip install pycontw-report-generator","title":"Installation"},{"location":"#usage","text":"$ python -m rg-cli --help Usage: rg-cli [OPTIONS] Options: --csv TEXT Read csv format data [required] --talks-csv TEXT CSV file for talks [required] --proposed-talks-csv TEXT CSV file for proposed talks [required] --booth-csv TEXT CSV file for booth checking [required] --interactive / --no-interactive Quiet mode. Useful for automation. True for no prompt. [default: False] --cjk-support / --no-cjk-support Enable CJK support in the plot or not. [default: False] --conf TEXT Configuration file of how to analyze --yaml TEXT Report yaml file to describe how a report would be [required] --package-yaml TEXT Package yaml file to describe how a package is defined [required] --sponsor-yaml TEXT Sponsor yaml file to describe how a sponsor is defined [required] --output-path TEXT Where the reports exported [default: /tmp] --help Show this message and exit. Create a working folder to place your attendee raw data outside of the source folder so you won't commit your raw data accidentally. mkdir ../pycontw-postevent-report-generator-working","title":"Usage"},{"location":"#example","text":"After launching your virtual environment, issue the following command: rg-cli --csv ./a.csv --csv ./b.csv --csv ./c.csv --yaml ./report_generator/data/generic.yaml --package-yaml ./examples/packages.yaml --sponsor-yaml ./examples/sponsors.yaml Follow the prompt instruction and you will get jpg images. So far it is well tested with the data of year 2017.","title":"Example"},{"location":"#contributing","text":"Please see the Contributing for further details.","title":"Contributing"},{"location":"contributing/","text":"Contributing Step 1. Fork this repository to your GitHub Step 2. Clone the repository from your GitHub git clone https://github.com/[YOUR GITHUB ACCOUNT]/pycontw-postevent-report-generator.git Step 3. Add this repository to the remote in your local repository git remote add upstream \"https://github.com/pycontw/pycontw-postevent-report-generator\" You can pull the latest code in master branch through git pull upstream master afterward. Step 4. Check out a branch for your new feature git checkout -b [YOUR FEATURE] Step 5. Install Prerequsite python -m pip install pipx python -m pipx install pipenv invoke python -m pipx ensurepath pipx : for python tool management pipenv : for dependency management invoke : for task management Step 6. Create Your Own Python Virtual Environment and Install Depdencies inv env.init-dev Step 6. Work on your new feature [Optional] Step 7. Install Attendees Analyzer for local test If you want to develop it, please run: inv build.develop Step 8. Run test cases Make sure all test cases pass. inv test Step 9. Run test coverage Check the test coverage and see where you can add test cases. inv test.cov Step 10. Reformat source code Format your code through black and isort . inv style.reformat Step 11. Run style check Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint [Optional] Step 12. Run security check Ensure the packages installed are secure inv secure [Optional] Check whether there is common security issue in the code. Note that you do not have to fix all the issues warned by bandit inv secure.bandit Step 13. Check the installed cli is runnable inv build.test-cli Step 14. Create a Pull Request and celebrate \ud83c\udf89","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#step-1-fork-this-repository-to-your-github","text":"","title":"Step 1. Fork this repository to your GitHub"},{"location":"contributing/#step-2-clone-the-repository-from-your-github","text":"git clone https://github.com/[YOUR GITHUB ACCOUNT]/pycontw-postevent-report-generator.git","title":"Step 2. Clone the repository from your GitHub"},{"location":"contributing/#step-3-add-this-repository-to-the-remote-in-your-local-repository","text":"git remote add upstream \"https://github.com/pycontw/pycontw-postevent-report-generator\" You can pull the latest code in master branch through git pull upstream master afterward.","title":"Step 3. Add this repository to the remote in your local repository"},{"location":"contributing/#step-4-check-out-a-branch-for-your-new-feature","text":"git checkout -b [YOUR FEATURE]","title":"Step 4. Check out a branch for your new feature"},{"location":"contributing/#step-5-install-prerequsite","text":"python -m pip install pipx python -m pipx install pipenv invoke python -m pipx ensurepath pipx : for python tool management pipenv : for dependency management invoke : for task management","title":"Step 5. Install Prerequsite"},{"location":"contributing/#step-6-create-your-own-python-virtual-environment-and-install-depdencies","text":"inv env.init-dev","title":"Step 6. Create Your Own Python Virtual Environment and Install Depdencies"},{"location":"contributing/#step-6-work-on-your-new-feature","text":"","title":"Step 6. Work on your new feature"},{"location":"contributing/#optional-step-7-install-attendees-analyzer-for-local-test","text":"If you want to develop it, please run: inv build.develop","title":"[Optional] Step 7. Install Attendees Analyzer for local test"},{"location":"contributing/#step-8-run-test-cases","text":"Make sure all test cases pass. inv test","title":"Step 8. Run test cases"},{"location":"contributing/#step-9-run-test-coverage","text":"Check the test coverage and see where you can add test cases. inv test.cov","title":"Step 9. Run test coverage"},{"location":"contributing/#step-10-reformat-source-code","text":"Format your code through black and isort . inv style.reformat","title":"Step 10. Reformat source code"},{"location":"contributing/#step-11-run-style-check","text":"Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint","title":"Step 11. Run style check"},{"location":"contributing/#optional-step-12-run-security-check","text":"Ensure the packages installed are secure inv secure [Optional] Check whether there is common security issue in the code. Note that you do not have to fix all the issues warned by bandit inv secure.bandit","title":"[Optional] Step 12. Run security check"},{"location":"contributing/#step-13-check-the-installed-cli-is-runnable","text":"inv build.test-cli","title":"Step 13. Check the installed cli is runnable"},{"location":"contributing/#step-14-create-a-pull-request-and-celebrate","text":"","title":"Step 14. Create a Pull Request and celebrate \ud83c\udf89"}]}